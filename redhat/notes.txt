redhat

[user@host ~]$  			[root@host ~]#

The command is the name of the program to run. It might be followed by one or more options, which adjust the behavior of the command or what it does. Options normally start with one or two dashes (-a or --all, for example) to distinguish them from arguments. Commands might also be followed by one or more arguments, which often indicate a target that the command should operate on
For example, in the usermod -L user01 string, usermod is the command, -L is the option, and user01 is the argument

ssh
An alternative way to authenticate to a remote machine without entering a password is through public key authentication

The ssh command -i option is used to specify the user's private key file, which is mylab.pem. The matching public key is already set up as an authorized key in the remoteuser account.

[user@host ~]$ ssh -i mylab.pem remoteuser@remotehost  you can use the chmod 600 mylab.pem command to ensure that only the owner can read the file


Shortcut	Description
Ctrl+A	Jump to the beginning of the command line.
Ctrl+E	Jump to the end of the command line.
Ctrl+U	Clear from the cursor to the beginning of the command line.
Ctrl+K	Clear from the cursor to the end of the command line.
Ctrl+LeftArrow	Jump to the beginning of the previous word on the command line.
Ctrl+RightArrow	Jump to the end of the next word on the command line.
Ctrl+R	Search the history list of commands for a pattern.
55TURNK3y

date +%R saati gosterir
date +%x tarihi gosterir

The less command displays one page of a file at a time The head and tail commands display the beginning and the end of a file-n option to specify a different number of lines.The wc command counts lines, words, and characters in a file.-l, -w, or -c options to display only the given number of lines, words, or characters,  line words and chareCTER sira ile gelir.



To write one command in more than one line, use a backslash character (\),

The !number command expands from history command

Moving the Cursor:

Ctrl + A: Move to the beginning of the line.
Ctrl + E: Move to the end of the line.
Ctrl + U: Delete from the cursor to the beginning of the line.
Ctrl + K: Delete from the cursor to the end of the line.
Deleting and Cutting:

Ctrl + W: Delete the word before the cursor.
Ctrl + Y: Paste the last deleted text.
Manipulating Words:

Alt + Backspace or Ctrl + W: Delete the word before the cursor.
Alt + D: Delete the word after the cursor.
History Navigation:

Ctrl + R: Search the command history interactively.
!!: Repeat the last command.
!n: Repeat the nth command in the history.
Other Handy Commands:

Ctrl + C: Cancel the current command.
Ctrl + L: Clear the screen.
Ctrl + D: Exit the shell (or send an EOF if the line is empty).
!! en son girielen komutu tekrar yazar

/dev	Special device files that the system uses to access hardware.
/etc	System-specific configuration files.
/home	Home directory, where regular users store their data and configuration files.
/root	Home directory for the administrative superuser, root.
/run	Runtime data for processes that started since the last boot. This data includes process ID files and lock files. The contents of this directory are re-created on reboot. This directory consolidates the /var/run and /var/lock directories from earlier versions of Red Hat Enterprise Linux.
/tmp	A world-writable space for temporary files. Files that are not accessed, changed, or modified for 10 days are deleted from this directory automatically. The /var/tmp directory is also a temporary directory, in which files that are not accessed, changed, or modified in more than 30 days are deleted automatically.
/usr	Installed software, shared libraries, including files, and read-only program data. Significant subdirectories in the /usr directory include the following commands:
/usr/bin: User commands

/usr/sbin: System administration commands

/usr/local: Locally customized software

/var	System-specific variable data should persist between boots. Files that dynamically change, such as databases, cache directories, log files, printer-spooled documents, and website content, might be found under /var.

The touch command updates the time stamp of a file to the current date and time without otherwise modifying it.

cd - once ki komut sadece cd home a gider


You can create two types of links: a hard link, or a symbolic link (sometimes called a soft link).The new hard link acts exactly like the original file name. After the link is created, you cannot tell the difference between the new hard link and the original name of the file.You can determine whether a file has multiple hard links by using the ls -l command.You can use the "ln" command to create a hard link (another file name) that points to an existing file. The command needs at least two arguments: a path to the existing file, and the path to the hard link that you want to create.--- ln newfile.txt /tmp/newfile-hlink2.txt    To determine whether two files are hard linked, use the ls command -i option to list each file's inode number. If the files are on the same file system and their inode numbers are the same, then the files are hard links that point to the same data file content.Even if the original file is deleted, you can still access the contents of the file provided that at least one other hard link exists.Second, you can use hard links only if both files are on the same file system.

Create Symbolic Links
The ln command -s option creates a symbolic link, which is also called a "soft link". A symbolic link is not a regular file, but a special type of file that points to an existing file or directory. symbolic links can link two files on different file systems. Symbolic links can point to a directory or special file, not just to a regular file.



Pattern	Matches
*	Any string of zero or more characters
?	Any single character
[abc…​]	Any one character in the enclosed class (between the square brackets)
[!abc…​]	Any one character not in the enclosed class
[^abc…​]	Any one character not in the enclosed class
[[:alpha:]]	Any alphabetic character
[[:lower:]]	Any lowercase character
[[:upper:]]	Any uppercase character
[[:alnum:]]	Any alphabetic character or digit
[[:punct:]]	Any printable character that is not a space or alphanumeric
[[:digit:]]	Any single digit from 0 to 9
[[:space:]]	Any single white space character, which might include tabs, newlines, carriage returns, form feeds, or spaces


When the original regular file is deleted, the symbolic link still points to the file but the target is gone

[user@host glob]$ echo {Sunday,Monday,Tuesday,Wednesday}.log
Sunday.log Monday.log Tuesday.log Wednesday.log
[user@host glob]$ echo file{1..3}.txt
file1.txt file2.txt file3.txt
[user@host glob]$ echo file{a..c}.txt
filea.txt fileb.txt filec.txt
[user@host glob]$ echo file{a,b}{1,2}.txt
filea1.txt filea2.txt fileb1.txt fileb2.txt
[user@host glob]$ echo file{a{1,2},b,c}.txt
filea1.txt filea2.txt fileb.txt filec.txt


variables
[user@host ~]$ USERNAME=operator
[user@host ~]$ echo $USERNAME
operator
To prevent mistakes due to other shell expansions, you can put the name of the variable in curly braces, for example ${VARIABLENAME}.

[user@host ~]$ USERNAME=operator
[user@host ~]$ echo ${USERNAME}
operator
Variable names can contain only letters (uppercase and lowercase), numbers, and underscores. Variable names are case-sensitive and cannot start with a number.

echo my directory is $(pwd)
my directory is /root/yusuf/redhat


The backslash (\) is an escape character in the Bash shell. It protects the following character from expansion.

[!b]*  b olmayan demek

*[[:digit:]]*    matches only file names that contain a number?


Use the man command -k option (equivalent to the apropos command) to search for a keyword in man page titles and descriptions

The man command -K (uppercase) option searches for the keyword in the full-text page, not only in the titles and descriptions. A full-text search uses greater system resources and takes more time. The /usr/share/man directory contains all man pages



stdin 0
stdout 1
stderr 2
 If you redirect stdout to a file and the file does not exist, then the file is created.
2> /dev/null     displays output to a terminal and discards all error messages

VIM
A v keystroke enters visual mode, where multiple characters might be selected for text manipulation. Use Shift+V for multiline and Ctrl+V for block selection. To exit the visual mode, use the v, Shift+V, or Ctrl+V keystrokesIf you are unsure which mode Vim is using, then press Esc a few times to get back into command mode.

The u key undoes the most recent edit.

The x key deletes a single character.
hang back, jump down, kick up, leap forward.

Change the Shell Environment
You can use the set command to list all shell variables that are currently set.
For example, the HISTFILE, HISTFILESIZE, and HISTTIMEFORMAT shell variables affect the shell history and the history command
If a shell variable is not an environment variable, then only the shell can use it. However, if a shell variable is an environment variable, then the shell and any programs that run from that shell can use the variable.

You can assign any variable that is defined in the shell as an environment variable by marking it for export with the export command.
[user@host ~]$ EDITOR=vim
[user@host ~]$ export EDITOR
veya
[user@host ~]$ export EDITOR=vim  boyle tek satirda da olur

Another important environment variable is PATH. The PATH variable contains a list of colon-separated directories that contain programs:
[user@host ~]$ echo $PATH
/home/user/.local/bin:/home/user/bin:/usr/share/Modules/bin:/usr/local/bin:/usr/bin:/usr/local/sbin:/usr/sbin

When you run a command such as the ls command, the shell looks for the ls executable file in each of those directories in order, and runs the first matching file that it finds. (On a typical system, this file is /usr/bin/ls.)


Set Variables Automatically
When Bash starts, several text files run with shell commands that initialize the shell environment. To set shell or environment variables automatically when your shell starts, you can edit these Bash startup scripts.



For interactive login shells, the /etc/profile and ~/.bash_profile files configure the Bash environment. The /etc/profile and ~/.bash_profile files also source the /etc/bashrc and ~/.bashrc files respectively. For interactive non-login shells, only the /etc/bashrc and ~/.bashrc files configure the Bash environment. Whereas the /etc/profile and /etc/bashrc files apply to the whole system, the ~/.bash_profile and ~/.bashrc files are user-specific. Non-interactive shells invoke any files that the BASH_ENV variable defines. This variable is not defined by default.

To create a variable that is available to all of your interactive shells, edit the ~/.bashrc file. To apply a variable only once after the user logs in, define it in the ~/.bash_profile file.

ornek>
# .bash_profile

# Get the aliases and functions
if [ -f ~/.bashrc ]; then
        . ~/.bashrc
fi

# User specific environment and startup programs
export EDITOR=nano  bunu eklezerek editor nano olur


[user@host ~]$ alias hello='echo "Hello, this is a long string."'
[user@host ~]$ hello
Hello, this is a long string.

[user@host ~]$ echo $file1
/tmp/tmp.z9pXW0HqcC
[user@host ~]$ unset file1
[user@host ~]$ echo $file1


To unexport a variable without unsetting it, use the export -n command:
[user@host ~]$ export -n PS1
To unset an alias, use the unalias command:
[user@host ~]$ unalias hello

Manage Local Users and Groups

.bashrc alias eklersek kalici hale gelir.



ORTAM DEGISKENLERI
buyuk harf olur ve $ olur.  sayi ile baslayamanz. printenv komutu ile gorulur.unset ile sileriz. ama dosya ya eklemedi isek kapatinca gider zaten.
.bashrc dosyasina eklemek gerek. basina export eklersek global olur
lokal degisken ile printenv komutu ile calismaz. global ler calsiir. echo $degisken yada printenv degisken $ isareti olamdan olur unset yada export -n ile silinebilir.





 USER GROPUS
The superuser account administers the system. The superuser name is root and the account has a UID of 0. The superuser has full system access.
The system user accounts are used by processes that provide supporting services. These processes, or daemons, usually do not need to run as the superuser. They are assigned non-privileged accounts to secure their files and other resources from each other and from regular users on the system. Users do not interactively log in with a system user account.
Most users have regular user accounts for their day-to-day work. Like system users, regular users have limited access to the system.

Use the id command to show information about the currently logged-in user:
ip user buda o kullanici hakkinda bilgi verir

The /etc/sudoers file is the main configuration file for the sudo command

UID 0 : The superuser (root) account UID.

UID 1-200 : System account UIDs that are statically assigned to system processes.

UID 201-999 : UIDs that are assigned to system processes that do not own files on this system. Software that requires an unprivileged UID is dynamically assigned a UID from this available pool.

UID 1000+ : The UID range to assign to regular, unprivileged users.

usermod -c "Operator Two" operator2    Sonuç olarak, bu komut, operator2 adlı kullanıcının tam adını "Operator Two" olarak değiştirir. Kullanıcının tam adı genellikle sadece bilgilendirme amacıyla kullanılır ve sistemdeki birçok yerde görülebilir.



The groupadd command -g option specifies a GID for the group to use.
[root@host ~]# groupadd -g 10000 group01
The groupmod command changes the properties of an existing group. The groupmod command -n option specifies a new name for the group.
[root@host ~]# groupmod -n group0022 group02


Notice that the group name updates to group0022 from group02. The groupmod command -g option specifies a new GID.
[root@host ~]# groupmod -g 20000 group0022

[root@host ~]# groupdel group0022

A user's primary group is the group that is viewed on the user's account in the /etc/passwd file


Create the operators supplementary group with a GID of 30000.
[root@servera ~]# groupadd -g 30000 operators


Create the admin supplementary group without specifying a GID.
[root@servera ~]# groupadd admin

Add the operator1, operator2, and operator3 users to the operators group.
[root@servera ~]# usermod -aG operators operator1
[root@servera ~]# usermod -aG operators operator2
[root@servera ~]# usermod -aG operators operator3

Create the /etc/sudoers.d/admin file so that the members of the admin group have full administrative privileges.
[root@servera ~]# echo "%admin ALL=(ALL) ALL" >> /etc/sudoers.d/admin


Create the consultants group with a GID of 35000.
[root@serverb ~]# groupadd -g 35000 consultants

Create the consultant1, consultant2, and consultant3 users with the consultants group as their supplementary group.
[root@serverb ~]# useradd -G consultants consultant1
[root@serverb ~]# useradd -G consultants consultant2
[root@serverb ~]# useradd -G consultants consultant3

Set the account expiry date of the consultant1, consultant2, and consultant3 accounts to the same value as determined in the preceding step. For example:
[root@serverb ~]# chage -E 2022-06-08 consultant1

Change the password policy for the consultant2 account to require a new password every 15 days.
[root@serverb ~]# chage -M 15 consultant2


Chapter 7. Control Access to Files

Permission	Effect on files	Effect on directories
r (read)	File contents can be read.	        Contents of the directory (the file names) can be listed.
w (write)	File contents can be changed.	        Any file in the directory can be created or deleted.
x (execute)	Files can be executed as commands.	The directory can become the current working directory. You can run the cd command to it, but it also requires read permission to list files there.

Anyone who owns or has write permissions to a directory can remove files on it, regardless of the ownership or permissions on the file itself. You can override this behavior by using the sticky bit permission, to be discussed later in this chapter.

Use the ls command -d option to show detailed information about a directory itself, and not its contents.
[user@host ~]$ ls -ld /home
drwxr-xr-x. 5 root root 4096 Feb 31 22:00 /home

The first character of the long listing is the file type, and is interpreted as follows:

- is a regular file.
d is a directory.
l is a symbolic link.
c is a character device file.
b is a block device file.
p is a named pipe file.
s is a local socket file.

r	read	Read access to the file. Listing access to the directory.
w	write	Write permissions to the file or directory.
x	execute	Execute permissions to the file. Allows entering the directory, and accessing files and subdirectories inside the directory.
X	special execute	Execute permissions to a directory, or execute permissions to a file if at least one of the execute bits is set.

[user@host ~]$ chmod go-rw document.pdf

Add execute permission for everyone on the myscript.sh file:
[user@host ~]$ chmod a+x myscript.sh

[root@host opt]# chmod -R g+rwX demodir
sets read and write access on the demodir directory and all its children for their group owner, but applies group execute permissions only to directories and files where execute permission is already set for user, group, or other.

To add read permissions for this access level, add 4.
To add write permissions, add 2.
To add execute permissions, add 1.
[user@host ~]$ chmod 644 sample.txt

to grant ownership of the app.conf file to the student user,
[root@host ~]# chown student app.conf

For example, the following command changes the group ownership of the Pictures directory to admins:
[root@host ~]# chown :admins Pictures

to change the ownership of the Pictures directory to the visitor user and the group to guests, use the following command:
[root@host ~]# chown visitor:guests Pictures


Permission	Effect on files	Effect on directories
u+s (suid)	File executes as the user that owns the file, not as the user that ran the file.	No effect.
g+s (sgid)	File executes as the group that owns the file.	Files that are created in the directory have a group owner to match the group owner of the directory.
o+t (sticky)	No effect.	Users with write access to the directory can remove only files that they own; they cannot remove or force saves to files that other users own.

Add the setgid bit on the example directory by using the symbolic method:
[user@host ~]# chmod g+s example

Remove the setuid bit on the example directory by using the symbolic method:
[user@host ~]# chmod u-s example




Chapter 8. Monitor and Manage Linux Processes

ps aux   The common ps command aux option displays all processes including processes without a controlling terminal.
Listing Processes
The ps command is used for listing detailed information for current processes.

User identification (UID), which determines process privileges

Unique process identification (PID)

Amount of used CPU and elapsed real time

Amount of allocated memory

The process stdout location, which is known as the controlling terminal

The current process state

A signal is a software interrupt that is delivered to a process. Signals report events to an executing program. Events that generate a signal can be an error, an external event (an I/O request or an expired timer), or by the explicit use of a signal-sending command or keyboard sequence.

You can use the kill command -l option to list the names and numbers of all available signals.
[user@host ~]$ kill -l
 1) SIGHUP      2) SIGINT      3) SIGQUIT     4) SIGILL      5) SIGTRAP
 6) SIGABRT     7) SIGBUS      8) SIGFPE      9) SIGKILL    10) SIGUSR1
11) SIGSEGV    12) SIGUSR2    13) SIGPIPE    14) SIGALRM    15) SIGTERM
16) SIGSTKFLT  17) SIGCHLD    18) SIGCONT    19) SIGSTOP    20) SIGTSTP
[user@host ~]$ kill -9 5199

[user@host ~]$ kill -SIGTERM 5205
user   5986  0.0  0.0 221860  1048 pts/1  S+  16:45  0:00 grep --color=auto job [3]+  Terminated              control job3




Set the group permission for the /home/techdocs directory. Configure setgid; read, write, and execute permissions for the owner and group; and no permissions for others.
[root@serverb ~]# chmod 2770 /home/techdocs

Monitor Process Activity

Load average is a measurement that the Linux kernel provides, to represent the perceived system load for a period of time. It can be used as a rough gauge of how many system resource requests are pending, to determine whether system load increases or decreases.
The uptime command is one way to display the current load average.prints the current time, how long the machine has been up, how many user sessions are running, and the current load average.
[user@host ~]$ uptime
 15:29:03 up 14 min,  2 users,  load average: 2.92, 4.48, 5.20


Use the lscpu command to determine the number of CPUs on a system.
[user@host ~]$ lscpu
Architecture:        x86_64
CPU op-mode(s):      32-bit, 64-bit
Byte Order:          Little Endian
CPU(s):              4
On-line CPU(s) list: 0-3
Thread(s) per core:  2
Core(s) per socket:  2
Socket(s):           1
NUMA node(s):        1
...output omitted...


The top command displays a dynamic view of the system's processes and a summary header followed by a process or thread listthe top command continuously refreshes at a configurable interval and provides column reordering, sorting, and highlighting


 9- Control Services and Daemons
The systemd daemon manages the startup process for Linux, including service startup and service management in general. The systemd daemon activates system resources, server daemons, and other processes, both at boot time and on a running system

Daemons are processes that either wait or run in the background, to perform various tasks. Generally, daemons start automatically at boot time and continue to run until shutdown or until you manually stop them. By convention, daemon names end with d.

Use the systemctl command to explore the system's current state. For example, the following command lists and paginates all currently loaded service units.

[root@host ~]# systemctl list-units --type=service
UNIT                  LOAD    ACTIVE  SUB      DESCRIPTION
atd.service           loaded  active  running  Job spooling tools
auditd.service        loaded  active  running  Security Auditing Service
chronyd.service       loaded  active  running  NTP client/server
crond.service         loaded  active  running  Command Scheduler
dbus.service          loaded  active  running  D-Bus System Message Bus
...output omitted...

[root@host ~]# systemctl is-active sshd.service
active

[root@host ~]# systemctl is-enabled sshd.service
enabled

[root@host ~]# systemctl is-failed sshd.service
active

List all the installed service units on the servera machine.
[student@servera ~]$ systemctl list-units --type=service

Display the status of the chronyd service. Note the process ID of any active daemon.
[student@servera ~]$ systemctl status chronyd

Determine whether the sshd service is enabled to start at system boot.
[student@servera ~]$ systemctl is-enabled sshd
enabled

Verify that the psacct service is running.
[root@serverb ~]# systemctl is-active psacct
active

Summary
The systemd utility provides a method for activating system resources, server daemons, and other processes, both at boot time and on a running system.
Use the systemctl utility to start, stop, reload, enable, and disable services.
Use the systemd utility to manage service units, socket units, and path units.
Use the systemctl status command to determine the status of system daemons and network services that the systemd utility started.
The systemctl list-dependencies command lists all service units that a specific service unit depends on.
The systemd utility can mask a service unit so that it does not run, even to satisfy dependencies.


Chapter 10. Configure and Secure SSH

When a user runs the ssh command for connecting to an SSH server, the command checks for a copy of the server's public key in its local known hosts file. The key might be preconfigured in the /etc/ssh/ssh_known_hosts file, or the user might have the ~/.ssh/known_hosts file that contains the key in their home directory.


Display the users that are currently logged in to the serverb machine. The student user is logged in to the system from the host with an IP address of 172.25.250.10, which is the servera machine in the classroom network.
[student@serverb ~]$ w --from
03:39:04 up 16 min,  1 user,  load average: 0.00, 0.00, 0.00
USER     TTY      FROM             LOGIN@   IDLE   JCPU   PCPU WHAT
student  pts/0    172.25.250.10    20:40    1.00s  0.01s  0.00s w --from

SSH Key-based Authentication
One key is private and held only by you. The second key is your related public key, which is not secret. The private key acts as your authentication credential, and it must be stored securely. The public key is copied to your account on servers that you will remotely access, and verifies your use of your private key.

The ssh-keygen command -f option specifies the files to save the keys in
ssh-keygen -f .ssh/key-with-pass

### Share the Public Key
To configure your remote account for access, copy your public key to the remote system. The ssh-copy-id command copies the public key of the SSH key pair to the remote system. You can specify a specific public key with the ssh-copy-id command, or use the default ~/.ssh/id_rsa.pub file.
ssh-copy-id -i .ssh/key-with-pass.pub user@remotehost

[user@host ~]$ cat ~/.ssh/config
host servera
     HostName                      servera.example.com
     User                          usera
     IdentityFile                  ~/.ssh/id_rsa_servera
boyle bir sey eklenebilir.

ssh -v operator1@servera hostname   buda ayrintili olarak verir baglanirken steo step ekrana basar

Generate another set of SSH keys with passphrase-protection. Save the key as /home/operator1/.ssh/key2. Use redhatpass as the passphrase of the private key.
[operator1@serverb ~]$ ssh-keygen -f .ssh/key2

ssh in key mizi yonetmesini istersek
ssh-agent
eval $(ssh-agent)
ssh-add private_key_path bu 3 komutu sira ile girersek ssh key olusturuken sifre olusturmus isek bu sifreyi yonetir artik .
yani bir key manager gorevi gorurr

Chapter 11. Manage Networking
Describe Network Interface Names
Each network port on a system has a name, which you use to configure and identify it.
Earlier versions of Red Hat Enterprise Linux used names such as eth0, eth1, and eth2 for each network interface. The eth0 interface name was the first network port that the operating system detected; eth1 was the second interface, and so on

Network interface names start with the type of interface:
Ethernet interfaces begin with en ifconfig
Bu komut, mevcut ağ arayüzlerinin ayrıntılarını listeler. Çıktıda, her bir arayüzün adı (eth0, eth1, vb.), IP adresi, MAC adresi ve diğer ağ bağlantı bilgileri görüntülenir.
WLAN interfaces begin with wl
WWAN interfaces begin with ww

IPv4 Addresses
An IPv4 address is a 32-bit number, which is expressed as four 8-bit octets in a decimal format that ranges in value from 0 to 255, separated by single dots. The address is divided into two parts: the network prefix and the host number.The network prefix identifies a unique physical or virtual subnet. The host number identifies a specific host on the subnet. All hosts on the same subnet have the same network prefix and can talk to each other directly without a router. A network gateway connects different networks, and a network router commonly operates as the gateway for a subnet.

A subnet is a segment of a larger network, and the use of the term depends on the context. An IP network is partitioned into multiple, smaller network segments. Typically, segment refers to the physical or virtual link layer, whereas subnet refers to the logical, network-layer addressing for the corresponding segment.

netmask 255.255.0.0 ise ilk 2 netwrok son 2 host a ait.
/24 demek ilk 24 network e ait demek


[user@host ~]$ ip link show
1: lo: <LOOPBACK,UP,LOWER_UP> mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT group default qlen 1000
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
2: ens3: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP mode DEFAULT group default qlen 1000
    link/ether 52:54:00:00:00:0a brd ff:ff:ff:ff:ff:ff
3: ens4: <BROADCAST,MULTICAST,UP,LOWER_UP> mtu 1500 qdisc mq state UP mode DEFAULT group default qlen 1000
    link/ether 52:54:00:00:00:1e brd ff:ff:ff:ff:ff:ff


ip addr show ens3 bu ens3 un ip adresini verir bizw



 hostnamectl status

 Change the hostname.
[root@servera ~]# hostname testname

Reboot the system.
[root@servera ~]# systemctl reboot

The nmcli command-line tool configures network settings with the NetworkManager daemon.
Starting in Red Hat Enterprise Linux 9, the default location for network configurations is the /﻿etc/NetworkManager/system-connections directory.
The system's static hostname is stored in the /etc/hostname file.
The hostnamectl command modifies or views the status of the system's hostname and related settings.

rpm -qa : List all installed packages.

rpm -q : List the currently installed package version.
[user@host ~]$ rpm -q dnf

rpm -qi : Get detailed package information.
rpm -ql : List the files that the package installs.
[user@host ~]$ rpm -ql dnf

Use the rpm command to install an RPM package that you downloaded to your local directory.
[root@host ~]# rpm -ivh podman-4.0.0-6.el9.x86_64.rpm

View information for the rhcsa-script-1.0.0-1.noarch.rpm package.
[student@servera ~]$ rpm -q -p rhcsa-script-1.0.0-1.noarch.rpm -i

List files in the rhcsa-script-1.0.0-1.noarch.rpm package.

[student@servera ~]$ rpm -q -p rhcsa-script-1.0.0-1.noarch.rpm -l
/opt/rhcsa-script/mymotd

Use the sudo rpm -ivh command to install the rhcsa-script-1.0.0-1.noarch.rpm RPM package.
[student@servera ~]$ sudo rpm -ivh rhcsa-script-1.0.0-1.noarch.rpm

Use the rpm command to verify that you correctly installed the package.
[student@servera ~]$ rpm -q rhcsa-script

dnf info httpd

Task:	Command:
List installed and available packages by name.	 dnf list [NAME-PATTERN]
List installed and available groups.	         dnf group list
Search for a package by keyword.	             dnf search KEYWORD
Show details of a package.                       dnf info PACKAGENAME
Install a package.	                             dnf install PACKAGENAME
Install a package group.	                     dnf group install GROUPNAME
Update all packages.	                         dnf update
Remove a package.	                             dnf remove PACKAGENAME
Display transaction history.	                 dnf history

dnf module list : List the available modules with the module name, stream, profiles, and a summary.
dnf module list module-name : List the module streams for a specific module and retrieve their status.


dnf repolist all

dnf repolist all


Identify File Systems and Devices
Objectives

Storage Management Concepts
Red Hat Enterprise Linux (RHEL) uses the Extents File System (XFS) as the default local file system. RHEL supports the Extended File System (ext4) file system for managing local file

Access the contents of a file system by mounting it on an empty directory. This directory is called a mount point. When the directory is mounted, use the ls command to list its contents. Many file systems are automatically mounted when the system boots.



Partitions are block devices in their own right. For example, on the first SATA-attached storage, the first partition is the /dev/sda1 disk. The second partition of the same storage is the /dev/sda2 disk. The third partition on the third SATA-attached storage device is the /dev/sdc3 disk,

Logical Volumes
Another way of organizing disks and partitions is with Logical Volume Management (LVM). With LVM, it is possible to aggregate block devices into a volume group.Disk space in the volume group is separated into logical volumes, which are the functional equivalent of a partition on a physical disk.
The LVM system assigns names to volume groups and logical volumes on their creation. LVM creates a directory in the /dev directory that matches the group name, and creates a symbolic link within that new directory with the same name as the logical volume. That logical volume file is then available to be mounted. For example, when a myvg volume group and the mylv logical volume are present, the full path to the logical volume is the /dev/myvg/mylv file.

Use the df command to display an overview of local and remote file-system devices, which includes the total disk space, used disk space, free disk space, and the percentage of the entire disk space.

Use the du command for more detailed information about a specific directory tree space
du /usr/share

You can mount the file system in one of the following ways with the mount command:
With the device file name in the /dev directory.
With the UUID, a universally unique identifier of the device.

Use the lsblk command to list the details of a specified block device or of all the available devices.

the identified partition is 9.3 GB, then mount the /﻿dev/vda4 partition.
Mount File System with the Partition Name
The following example mounts the /dev/vda4 partition on the /mnt/data mount point.
[root@host ~]# mount /dev/vda4 /mnt/data

The lsblk -fp command lists the full path of the device, the UUIDs and mount points, and the partition's file-system type. The mount point is blank when the file system is not mounted.
Mount the file system by the file-system UUID.
[root@host ~]# mount UUID="efd314d0-b56e-45db-bbb3-3f32ae98f652" /mnt/data


LOCATE command

The locate command searches for files based on the name or path to the file. The command is fast, because it looks up this information from the mlocate database. However, this database does not update in real time and requires frequent updates for accurate results. This feature also means that the locate command does not search for files that were created since the last database update. for this command you have to be root.
locate -n 1 passwd bu 1 adet sonuc getirir. cunku locate komutu nda outcome cok oluyor.

updatedb this command update the database.


FIND command
it searches according such as the file's permissions, type of file, size, or modification time.
find / -name '*.txt'
find -user developer
find / -user root -group mail
find /home -perm 764
find -perm -o=r
find -size 10M
find -size +10G more than 10 GB
find /etc -type d  # Search for all directories in the /etc directory:
find / -type l # Search for all soft links in the / directory:
sudo find /var/lib -user chrony
find /dev -type b # List all block device files in the /dev directory.

The df command reports total disk space, used disk space, and free disk space on all mounted regular file systems.

The lsblk command lists the details of block devices, such as the size and the UUID



Chapter 14. Analyze Servers and Get Support


Cockpit, bir Linux sunucuyu web tarayıcısı üzerinden yönetmek için kullanılan bir araçtır.

bitti
